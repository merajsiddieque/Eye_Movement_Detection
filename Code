{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":12750682,"sourceType":"datasetVersion","datasetId":8060278}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import os\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import layers, models\n\n# Path to dataset\ndata_dir = \"/kaggle/input/eye-tracking-dataset/eye_tracker_data/data/data\"\n\n# Parameters\nimg_height = 64\nimg_width = 64\nbatch_size = 32\nepochs = 10\n\n# Data Augmentation\ntrain_datagen = ImageDataGenerator(\n    rescale=1.0/255,\n    validation_split=0.2,  # 80% train, 20% validation\n    rotation_range=10,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    zoom_range=0.1,\n    horizontal_flip=False  # Don't flip gaze images\n)\n\n# Training set\ntrain_data = train_datagen.flow_from_directory(\n    data_dir,\n    target_size=(img_height, img_width),\n    batch_size=batch_size,\n    class_mode=\"categorical\",\n    subset=\"training\"\n)\n\n# Validation set\nval_data = train_datagen.flow_from_directory(\n    data_dir,\n    target_size=(img_height, img_width),\n    batch_size=batch_size,\n    class_mode=\"categorical\",\n    subset=\"validation\"\n)\n\n# CNN Model\nmodel = models.Sequential([\n    layers.Conv2D(32, (3, 3), activation=\"relu\", input_shape=(img_height, img_width, 3)),\n    layers.MaxPooling2D((2, 2)),\n\n    layers.Conv2D(64, (3, 3), activation=\"relu\"),\n    layers.MaxPooling2D((2, 2)),\n\n    layers.Conv2D(128, (3, 3), activation=\"relu\"),\n    layers.MaxPooling2D((2, 2)),\n\n    layers.Flatten(),\n    layers.Dense(128, activation=\"relu\"),\n    layers.Dropout(0.5),\n    layers.Dense(train_data.num_classes, activation=\"softmax\")\n])\n\n# Compile model\nmodel.compile(optimizer=\"adam\",\n              loss=\"categorical_crossentropy\",\n              metrics=[\"accuracy\"])\n\n# Train model\nhistory = model.fit(\n    train_data,\n    validation_data=val_data,\n    epochs=epochs\n)\n\n# Optional: also save as .keras file (single file format)\nmodel.save(\"eye_gaze_model.keras\")\n\n# Show class labels mapping\nprint(\"Class indices:\", train_data.class_indices)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-13T12:42:41.002904Z","iopub.execute_input":"2025-08-13T12:42:41.003185Z","iopub.status.idle":"2025-08-13T12:48:35.184939Z","shell.execute_reply.started":"2025-08-13T12:42:41.003163Z","shell.execute_reply":"2025-08-13T12:48:35.184292Z"}},"outputs":[{"name":"stdout","text":"Found 6000 images belonging to 5 classes.\nFound 1500 images belonging to 5 classes.\nEpoch 1/10\n\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m61s\u001b[0m 308ms/step - accuracy: 0.4621 - loss: 1.2523 - val_accuracy: 0.6927 - val_loss: 0.7965\nEpoch 2/10\n\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m33s\u001b[0m 173ms/step - accuracy: 0.8776 - loss: 0.3613 - val_accuracy: 0.7813 - val_loss: 0.5844\nEpoch 3/10\n\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m32s\u001b[0m 169ms/step - accuracy: 0.9482 - loss: 0.1607 - val_accuracy: 0.8233 - val_loss: 0.4697\nEpoch 4/10\n\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m32s\u001b[0m 171ms/step - accuracy: 0.9636 - loss: 0.1174 - val_accuracy: 0.8980 - val_loss: 0.3257\nEpoch 5/10\n\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m32s\u001b[0m 172ms/step - accuracy: 0.9750 - loss: 0.0816 - val_accuracy: 0.8707 - val_loss: 0.3759\nEpoch 6/10\n\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m32s\u001b[0m 173ms/step - accuracy: 0.9758 - loss: 0.0653 - val_accuracy: 0.9120 - val_loss: 0.2737\nEpoch 7/10\n\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m32s\u001b[0m 171ms/step - accuracy: 0.9845 - loss: 0.0677 - val_accuracy: 0.8853 - val_loss: 0.3311\nEpoch 8/10\n\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m32s\u001b[0m 170ms/step - accuracy: 0.9855 - loss: 0.0552 - val_accuracy: 0.9513 - val_loss: 0.1602\nEpoch 9/10\n\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m32s\u001b[0m 171ms/step - accuracy: 0.9866 - loss: 0.0379 - val_accuracy: 0.8907 - val_loss: 0.2860\nEpoch 10/10\n\u001b[1m188/188\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m32s\u001b[0m 171ms/step - accuracy: 0.9867 - loss: 0.0408 - val_accuracy: 0.9173 - val_loss: 0.1963\nClass indices: {'down': 0, 'left': 1, 'right': 2, 'straight': 3, 'up': 4}\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}